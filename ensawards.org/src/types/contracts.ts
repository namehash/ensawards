import type { Organization } from "@/types/organizations.ts";
import type { Name } from "@ensnode/ensnode-sdk";
import type { Address, Chain } from "viem";

export const ContractTypes = {
  Dao: "DAO",
  Defi: "DeFi",
} as const;

/**
 * ContractType is the derived string union of {@link ContractTypes}.
 */
export type ContractType = (typeof ContractTypes)[keyof typeof ContractTypes];

export const ContractSubtypes = {
  Governance: "Governance",
  DefiApp: "DeFi App",
  Utility: "Utility",
} as const;

/**
 * ContractSubtype is the derived string union of {@link ContractSubtypes}.
 */
export type ContractSubtype = (typeof ContractSubtypes)[keyof typeof ContractSubtypes];

export interface ContractAudit {
  
  /**
   * Auditor's name.
   */
  auditor: string;

  /**
   * Report URI linking to the full audit document.
   */
  report: URL;
}

/**
 * Describes a subset of an ENS profile relevant for contract naming.
 * 
 * For details, see:
 * - https://discuss.ens.domains/t/ensip-proposal-contract-metadata-standard-and-text-records/21397
 * - https://github.com/ensdomains/ensips/pull/50/files
 */
export interface EnsProfileForContract {
  
  /**
   * A link to the contract's documentation.
   * 
   * This field is associated with the "docs" text record.
   */
  docs?: URL;
  
  /**
   * URI to [contract metadata file](https://docs.soliditylang.org/en/latest/metadata.html#contract-metadata)
   * such as those generated by the Solidity or Vyper compiler.
   * 
   * This field is associated with the "compiled-metadata" text record.
   */
  compiledMetadata?: URL;

  /**
   * URI to an avatar image for the contract.
   * 
   * This field is associated with the "avatar" text record.
   */
  avatar?: URL;

  /**
   * List of audits for the contract.
   * 
   * This field is associated with the "audits" text record.
   */
  audits?: ContractAudit[];
}

/**
 * Describes the deployment of a contract to a specific address on a specific chain.
 */
export interface ContractDeployment {
  chain: Chain;
  address: Address;

  /**
   * The name of the contract from a codebase perspective (ex: in Solidity).
   */
  codeName: string;
}

export const ContractResolutionStatusIds = {
  PrimaryNamed: "primary-named",
  ForwardNamed: "forward-named",
  Unnamed: "unnamed",
  Unresolved: "unresolved",
} as const;

/**
 * ContractResolutionStatusId is the derived string union of {@link ContractResolutionStatusIds}.
 */
export type ContractResolutionStatusId = (typeof ContractResolutionStatusIds)[keyof typeof ContractResolutionStatusIds];

/**
 * Describes the ENS identity for `contract` where:
 * - the ENSIP-19 primary name lookup of `contract.address` on `contract.chain.id`
 *   results in `name`; AND
 * - the resolution of the subset of the ENS profile for `name` covered by
 *   {@link EnsProfileForContract} is `profile`.
 * 
 * Invariants:
 * - `resolutionStatus` must be {@link ContractResolutionStatusIds.PrimaryNamed}.
 * - `name` must be a non-empty normalized ENS name.
 */
export interface ContractIdentityPrimaryNamed {

  /**
   * The status of ENS resolution for `contract`.
   */
  resolutionStatus: typeof ContractResolutionStatusIds.PrimaryNamed;

  /**
   * The deployment of the contract being identified.
   */
  contract: ContractDeployment;

  /**
   * The result of an ENSIP-19 primary name resolution of `contract.address` on `contract.chain.id`.
   */
  name: Name;

  /**
   * The result of an ENS resolution of the subset of the ENS profile for `name` covered by
   * {@link EnsProfileForContract}.
   * 
   * If `undefined`, represents that the subset of ENS profile records covered by
   * {@link EnsProfileForContract} all resolved to be undefined.
   */
  profile?: EnsProfileForContract;
}

/**
 * Describes the ENS identity for `contract` where:
 * - the ENSIP-19 primary name lookup of `contract.address` on `contract.chain.id`
 *   results no ENS primary name; AND
 * - `name` resolves to `contract.address` for the cointype associated with `contract.chain.id`.
 * - the resolution of the subset of the ENS profile for `name` covered by
 *   {@link EnsProfileForContract} is `profile`.
 * 
 * Invariants:
 * - `resolutionStatus` must be {@link ContractResolutionStatusIds.ForwardNamed}.
 * - `name` must be a non-empty normalized ENS name.
 */
export interface ContractIdentityForwardNamed {

  /**
   * The status of ENS resolution for `contract`.
   */
  resolutionStatus: typeof ContractResolutionStatusIds.ForwardNamed;

  /**
   * The deployment of the contract being identified.
   */
  contract: ContractDeployment;

  /**
   * The ENS name that resolves to `contract.address` for the cointype associated with `contract.chain.id`.
   */
  name: Name;

  /**
   * The result of an ENS resolution of the subset of the ENS profile for `name` covered by
   * {@link EnsProfileForContract}.
   * 
   * If `undefined`, represents that the subset of ENS profile records covered by
   * {@link EnsProfileForContract} all resolved to be undefined.
   */
  profile?: EnsProfileForContract;
}

/**
 * Describes the ENS identity for `contract` where:
 * - the ENSIP-19 primary name lookup of `contract.address` on `contract.chain.id`
 *   results no ENS primary name; AND
 * - No ENS name is known that resolves to `contract.address` for the cointype associated with `contract.chain.id`.
 * 
 * Invariants:
 * - `resolutionStatus` must be {@link ContractResolutionStatusIds.Unnamed}.
 */
export interface ContractIdentityUnnamed {

  /**
   * The status of ENS resolution for `contract`.
   */
  resolutionStatus: typeof ContractResolutionStatusIds.Unnamed;

  /**
   * The deployment of the contract being identified.
   */
  contract: ContractDeployment;
}

/**
 * Describes the ENS identity for `contract` that has not been resolved yet.
 * 
 * Invariants:
 * - `resolutionStatus` must be {@link ContractResolutionStatusIds.Unresolved}.
 */
export interface ContractIdentityUnresolved {

  /**
   * The status of ENS resolution for `contract`.
   */
  resolutionStatus: typeof ContractResolutionStatusIds.Unresolved;

  /**
   * The deployment of the contract being identified.
   */
  contract: ContractDeployment;
}

/**
 * The result of resolving the ENS identity for a contract.
 *
 * Use the `resolutionStatus` field to determine the specific type interpretation
 * at runtime.
 */
export type ContractIdentityResolved = ContractIdentityPrimaryNamed | ContractIdentityForwardNamed | ContractIdentityUnnamed;

/**
 * The ENS identity for a contract that may or may not have been resolved yet.
 *
 * Use the `resolutionStatus` field to determine the specific type interpretation
 * at runtime.
 */
export type ContractIdentity = ContractIdentityResolved | ContractIdentityUnresolved;

/**
 * Describes a contract for use on the ENS Awards leaderboards.
 */
export interface Contract {
  org: Organization;
  type: ContractType;
  subtype: ContractSubtype;

  /**
   * The cached resolution result of the contract's ENS identity.
   * 
   * If `cachedIdentity.resolutionStatus` is {@link ContractResolutionStatusIds.ForwardNamed}
   * there may be additional names other than `cachedIdentity.name` that resolve to `cachedIdentity.contract.address`
   * for the cointype associated with `cachedIdentity.contract.chain.id`. But for simplicity in the data model we
   * arbitrarily define and display one such qualifying forward-resolving name.
   */
  cachedIdentity: ContractIdentityResolved;
}
