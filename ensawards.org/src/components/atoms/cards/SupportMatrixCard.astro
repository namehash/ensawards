---
import { cn } from "../../../utils/tailwindClassConcatenation";
import { shadcnButtonVariants } from "../../ui/shadcnButtonStyles";
import ChevronRightIcon from "../icons/ChevronRightIcon.astro";
export interface MobileMatrixRowCardProps {
  name: string;
  notes: string;
  viewButtonData: {
    text: string;
    link: string;
  };
  matrixColumnData: {
    category: string;
    value: string;
    link?: string;
    linkStyles?: string;
  }[];
}

const { name, notes, viewButtonData, matrixColumnData }: MobileMatrixRowCardProps = Astro.props;
---

<!--Mobile layout-->
<div
  class="w-full h-fit min-h-[275px] box-border sm:hidden flex flex-col flex-nowrap justify-center items-start gap-3
            p-4 rounded-2xl border border-gray-200">
  <div
    class="flex flex-row flex-nowrap justify-between items-center self-stretch">
    <slot name="icon" />
    <slot name="badge" />
  </div>
  <h3 class="text-lg leading-normal font-semibold text-black">{name}</h3>
  <div
    class="flex flex-col flex-nowrap justify-center items-center gap-2 self-stretch">
    <p class="text-sm font-normal leading-6 text-black self-stretch">{notes}</p>
    {
      matrixColumnData.map((elem, idx) => {
        if (elem.link) {
          return (
            <div class="flex flex-row flex-nowrap justify-between items-start self-stretch">
              <p class="text-muted-foreground text-sm leading-normal font-normal">
                {elem.category}
              </p>
              <a
                href={elem.link}
                target="_blank"
                rel="noreferrer noopener"
                class={cn(
                  "text-sm leading-normal font-medium transition-all duration-200",
                  elem.linkStyles,
                )}>
                {elem.value}
              </a>
            </div>
          );
        } else {
          return (
            <div class="flex flex-row flex-nowrap justify-between items-start self-stretch">
              <p class="text-muted-foreground text-sm leading-normal font-normal">
                {elem.category}
              </p>
              <p class="text-sm leading-normal font-medium text-black">
                {elem.value}
              </p>
            </div>
          );
        }
      })
    }
    <a
      href={viewButtonData.link}
      class={cn(
        shadcnButtonVariants({
          variant: "secondary",
          size: "default",
          className: "cursor-pointer rounded-full self-stretch",
        }),
      )}>
      {viewButtonData.text}
    </a>
  </div>
</div>

<!--Desktop layout-->
<div
  class="w-full h-fit min-h-[80px] box-border hidden sm:flex flex-row flex-nowrap justify-start items-start gap-10
            p-5 rounded-2xl border border-gray-200">
  <div class="w-2/3 flex flex-row flex-nowrap justify-start items-start gap-4">
    <slot name="icon" />
    <div class="flex flex-col flex-nowrap justify-center items-start gap-3">
      <h3 class="text-lg leading-normal font-semibold text-black self-stretch">
        {name}
      </h3>
      <p class="text-sm font-normal leading-6 text-gray-500 self-stretch">
        {notes}
      </p>
    </div>
  </div>
  <div
    class="min-[1000px]:w-1/3 flex flex-row flex-nowrap justify-between items-start gap-2">
    {
      matrixColumnData.map((elem, idx) => {
        if (elem.link) {
          return (
            <div class="flex flex-col flex-nowrap justify-start items-start">
              <p class="text-muted-foreground text-sm leading-normal font-normal">
                {elem.category}
              </p>
              <a
                href={elem.link}
                class={cn(
                  "text-sm leading-normal font-medium transition-all duration-200",
                  elem.linkStyles,
                )}>
                {elem.value}
              </a>
            </div>
          );
        } else {
          return (
            <div class="flex flex-col flex-nowrap justify-start items-start">
              <p class="text-muted-foreground text-sm leading-normal font-normal">
                {elem.category}
              </p>
              <p class="text-sm leading-normal font-medium text-black">
                {elem.value}
              </p>
            </div>
          );
        }
      })
    }
    <div
      class="flex flex-nowrap flex-row justify-end items-center py-[6px] w-[127px]">
      <slot name="badge" />
    </div>
    <a href={viewButtonData.link}>
      <ChevronRightIcon className="w-10 h-10 hover:opacity-60" />
    </a>
  </div>
</div>
