---
import { adaptBreadcrumb } from "../../utils";
import ChevronIcon from "../../assets/chevronRight.svg";
import HomeIcon from "../../assets/homeIcon.svg";

interface additionalHeroElement {
  name: string;
  value: string;
  link?: URL;
}
export interface SubpageHeroProps {
  header: string;
  description?: string;
  breadcrumbs?: string[]; //May change depending on astro's policy on breadcrumbs (update: external & validated (shown as an official astro lib) library, but requires SASS styling and is yet another dependency, so for now I'll try doing it manually)
  additionalElements?: additionalHeroElement[];
}

const { header, description, breadcrumbs, icon, additionalElements }: SubpageHeroProps =
  Astro.props;

let breadcrumbHref = "";
---

<section class="w-full h-fit box-border sm:px-8 sm:pt-[102px] sm:pb-10 flex flex-nowrap flex-col items-center justify-center bg-yellow-400">
    <div class="w-full max-w-[1216px] h-full max-h-[280px] flex flex-nowrap flex-col justify-center gap-[60px]">
        {breadcrumbs && <div class="flex flex-row flex-wrap justify-start items-center gap-[10px]">
            <a href="/"><HomeIcon /></a>
            <ChevronIcon />
            {breadcrumbs.map((crumb, idx) => {
            breadcrumbHref = breadcrumbHref.concat("/", crumb);
            if (idx < breadcrumbs.length - 1){
                return <><a class="text-sm leading-normal font-normal text-black" href={decodeURI(adaptBreadcrumb(breadcrumbHref))}>{crumb}</a><ChevronIcon /></>;
            }
            return <a class="text-sm leading-normal font-normal text-black" href={decodeURI(adaptBreadcrumb(breadcrumbHref))}>{crumb}</a>
        })}</div>}
        <div class="h-fit flex flex-nowrap flex-row items-end justify-between">
            <div class="flex flex-nowrap flex-col items-start justify-end gap-4">
                <slot name="icon" />
                <div class="flex flex-nowrap flex-col items-start justify-start gap-2">
                    <h1 class="text-black text-[44px] leading-[52px] font-semibold">{header}</h1>
                    {description && <p class="w-fit max-w-[580px] text-base leading-7 font-normal text-black/60">{description}</p>}
                </div>
            </div>
            {additionalElements &&
                    <div class="w-fit h-full flex-col justify-end items-center">
                        <div class="flex flex-row flex-nowrap justify-start items-center gap-10">
                            {additionalElements.map((elem) =>
                                    <div class="flex flex-col flex-nowrap justify-center items-start gap-0 leading-7">
                                        <p class="text-black/60">{elem.name}</p>
                                        {elem.link ? <a class="text-base leading-normal font-medium text-black underline underline-offset-[25%] decoration-black/40 hover:decoration-black transition-all duration-200" target="_blank" rel="noreferrer noopener" href={elem.link.toString()}>{elem.value} â†—</a> : <p class="text-base leading-normal font-medium text-black">{elem.value}</p>}
                                    </div>
                            )}
                        </div>
                    </div>
            }
        </div>
    </div>
</section>
