---
import BestPracticeCard from "../../../components/atoms/cards/BestPracticeCard.astro";
import SuggestionCard from "../../../components/atoms/cards/SuggestionCard.astro";
import ItemsList from "../../../components/molecules/ItemsList.astro";
import SubpageHero from "../../../components/molecules/SubpageHero.astro";
import DataLoadingError from "../../../components/organisms/DataLoadingError.astro";
import { BEST_PRACTICE_CATEGORIES } from "../../../data/bestPractices";
import Layout from "../../../layouts/Layout.astro";
import { CategoryStatus } from "../../../types/bestPractices";
import { getCategoryBySlug } from "../../../utils/dataAccess";
export function getStaticPaths() {
  return BEST_PRACTICE_CATEGORIES.map((category) => ({
    params: { category: category.slug },
  }));
}

const { category } = Astro.params;

const categoryToDisplay = getCategoryBySlug(category);
---

{
  categoryToDisplay === undefined ? (
    // theoretically, because of Astro's build-time page generation, this should never happen
    <DataLoadingError />
  ) : (
    <Layout
      pageMetadata={{
        title: `ENSAwards: ${categoryToDisplay.name} Best Practices`,
        description: categoryToDisplay.description,
        url: `https://ensawards.org/ens-best-practices/${category}`,
      }}>
      <SubpageHero
        header={categoryToDisplay.name}
        description={categoryToDisplay.description}
        breadcrumbs={["ENS best practices"]}
        additionalElements={[
          {
            name: "Best practices",
            value: categoryToDisplay.bestPractices.length,
          },
        ]}
      />
      <section class="w-full box-border h-fit flex flex-col flex-nowrap justify-start items-center gap-10 p-5 sm:py-[60px]">
        <ItemsList
          header="Best practices"
          additionalInfo={
            categoryToDisplay.status === CategoryStatus.Updated
              ? "The list of best practices is not comprehensive and is being updated."
              : undefined
          }>
          {categoryToDisplay.bestPractices.map((bestPractice, idx) => (
            <BestPracticeCard
              key={`best-practice-card-${idx}`}
              name={bestPractice.name}
              description={bestPractice.description}
              viewReviewsLink={`/ens-best-practices/${categoryToDisplay.slug}/${bestPractice.slug}`}
              appsPassed={bestPractice.appsPassed}
              appSupport={bestPractice.appSupport}
            />
          ))}
          <SuggestionCard whatsSuggested="best practice" />
        </ItemsList>
      </section>
    </Layout>
  )
}
