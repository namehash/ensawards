---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import ContractNamingBanner from "../../../components/atoms/ContractNamingBanner.astro";
import LeaderboardCard from "../../../components/atoms/cards/LeaderboardCard.astro";
import EnscribeIcon from "../../../components/atoms/icons/EnscribeIconDark.astro";
import EnscribeIconLight from "../../../components/atoms/icons/EnscribeIconLight.astro";
import ItemsList from "../../../components/molecules/ItemsList.astro";
import SubpageHero from "../../../components/molecules/SubpageHero.astro";
import { shadcnButtonVariants } from "../../../components/ui/shadcnButtonStyles";
import { contractPipeline } from "../../../contract-pipelines";
import { BEST_PRACTICE_CATEGORIES } from "../../../data/bestPractices";
import { nameYourSmartContracts } from "../../../data/bestPractices";
import Layout from "../../../layouts/Layout.astro";
import { OrgId } from "../../../types/organizations";
import { getOrgById } from "../../../utils/dataAccess";
import { scrollWithOffset } from "../../../utils/domActions";
import { cn } from "../../../utils/tailwindClassConcatenation";

const daoScores = contractPipeline();

const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/*.{jpeg,jpg,png,gif,svg}");
const placeIcons = [
  "/src/assets/firstPlaceAward.svg",
  "/src/assets/secondPlaceAward.svg",
  "/src/assets/thirdPlaceAward.svg",
];

const technicalSectionContentStyles = "w-fit text-base font-normal leading-7 text-gray-500";
const technicalSectionMinorHeaderStyles = "text-lg leading-normal font-semibold text-black";

export function getStaticPaths() {
  return BEST_PRACTICE_CATEGORIES.map((category) => ({
    params: { category: category.slug },
  }));
}
---

<Layout
  pageMetadata={{
    title: `ENSAwards: ${nameYourSmartContracts.name}`,
    description: nameYourSmartContracts.description,
    url: `https://ensawards.org/ens-best-practices/${nameYourSmartContracts.categorySlug}/${nameYourSmartContracts.slug}`,
  }}>
  <SubpageHero
    header={nameYourSmartContracts.name}
    description={nameYourSmartContracts.description}
    breadcrumbs={["ENS best practices", nameYourSmartContracts.categoryName]}
    additionalElements={[
      {
        name: "Category",
        value: nameYourSmartContracts.categoryName,
        link: `/ens-best-practices/${nameYourSmartContracts.categorySlug}`,
      },
    ]}>
    <technical-info-anchor
      data-id={nameYourSmartContracts.id}
      href={`#${nameYourSmartContracts.id}-technical-info`}
      id={`${nameYourSmartContracts.id}-technical-info-anchor`}
      slot="technicalSectionAnchor"
      class="text-white transition-all duration-200 decoration-white/40 hover:decoration-white underline underline-offset-[25%] decoration-from-font hover:cursor-pointer"
      >Learn More</technical-info-anchor
    >
    <div
      slot="extraAdditionalElement"
      class="flex flex-row sm:flex-col flex-nowrap justify-between sm:justify-center items-center sm:items-start sm:gap-0 leading-7 max-sm:self-stretch">
      <p class="text-gray-400">Powered by</p>
      <EnscribeIcon />
    </div>
  </SubpageHero>
  <section
    class="w-full box-border h-fit flex flex-col flex-nowrap justify-center items-center gap-10 py-5 sm:py-[60px] px-5 sm:px-8">
    <ContractNamingBanner />
    <ItemsList header="DAO Leaderboard" containerStyles="gap-3 sm:gap-3">
      {
        Object.entries(daoScores).map(([scoreCategory, value], idx) => {
          const daoId = scoreCategory as OrgId;
          const org = getOrgById(daoId);
          const OrgIcon = org.icon;
          return (
            <LeaderboardCard
              key={`dao-leaderboard-card-${org.id}`}
              name={org.name}
              ensAwardsScore={value}
              viewDetailsLink={`/dao/${org.slug}`}
              viewDetailsText="DAO report">
              {idx < 3 ? (
                <Image
                  alt={`${idx + 1}-place`}
                  src={images[placeIcons[idx]]()}
                  slot="placeIcon"
                />
              ) : (
                <p
                  slot="placeIcon"
                  class="w-8 pt-[7px] px-[11px] pb-[5px] text-sm leading-normal font-semibold text-muted-foreground">
                  {idx + 1}
                </p>
              )}
              <OrgIcon slot="appIcon" className="w-10 h-10 rounded-md" />
            </LeaderboardCard>
          );
        })
      }
    </ItemsList>
  </section>
  <section
    id={`${nameYourSmartContracts.id}-technical-info`}
    class="w-full box-border h-fit flex flex-col flex-nowrap justify-start items-center pt-10 sm:pt-6 pb-6 sm:pb-[60px] px-5 sm:px-8">
    <div
      class="w-full max-w-[1216px] flex flex-nowrap flex-row gap-20 justify-center items-start">
      <div
        class="max-w-[716px] flex flex-nowrap flex-col justify-center items-start gap-3">
        <h2 class="text-2xl leading-none font-semibold text-black">
          {nameYourSmartContracts.technicalDetails.main.header}
        </h2>
        <p class={technicalSectionContentStyles}>
          {nameYourSmartContracts.technicalDetails.main.content}
        </p>
        {
          nameYourSmartContracts.technicalDetails.sides.map(
            (additionalContent) => (
              <>
                <h3 class={technicalSectionMinorHeaderStyles}>
                  {additionalContent.header}
                </h3>
                <p class={technicalSectionContentStyles}>
                  {additionalContent.content}
                </p>
              </>
            ),
          )
        }
      </div>
      <div
        class="w-1/2 min-w-[300px] max-w-[420px] box-border h-fit hidden sm:flex flex-col flex-nowrap justify-center items-start gap-4 bg-gray-50 rounded-xl py-5 px-6">
        <h4
          class={cn(
            technicalSectionMinorHeaderStyles,
            "flex flex-row justify-start items-center gap-5",
          )}>
          Powered by <EnscribeIconLight />
        </h4>
        <p class={technicalSectionContentStyles}>
          With Enscribe, developers can easily assign ENS names to smart
          contracts, while providing verification data to increase user trust.
        </p>
        <div class="bg-gray-200 h-[1px] self-stretch"></div>
        <a
          href="https://app.enscribe.xyz/"
          target="_blank"
          rel="noreferrer noopener"
          class={cn(
            shadcnButtonVariants({
              variant: "secondary",
              size: "default",
              className: "cursor-pointer rounded-full self-stretch",
            }),
          )}>Learn more about Enscribe</a
        >
      </div>
    </div>
  </section>

  <script>
    import { scrollWithOffset } from "../../../utils/domActions";

    class AnchorToTechnicalInfo extends HTMLElement {
      connectedCallback() {
        const scrollAnchor = document.getElementById(
          `${this.dataset.id}-technical-info-anchor`,
        );
        scrollAnchor.addEventListener("click", (event) => {
          event.preventDefault();
          scrollWithOffset(`${this.dataset.id}-technical-info`, 60);
        });
      }
    }

    customElements.define("technical-info-anchor", AnchorToTechnicalInfo);
  </script>
</Layout>
