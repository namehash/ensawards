---
import ChevronDown from "../assets/chevronDown.svg";
import RainbowIcon from "../assets/rainbowIcon.svg";
import CardBadge from "../components/atoms/CardBadge.astro";
import AppReviewCard from "../components/atoms/cards/AppReviewCard.astro";
import CategoryCard from "../components/atoms/cards/CategoryCard.astro";
import ItemsList from "../components/molecules/ItemsList.astro";
import { shadcnButtonVariants } from "../components/shadcn/shadcnButtonStyles";
import { appReviewCards } from "../data/appReviewsData";
import { bestPracticesCategoryCards } from "../data/bestPracticesData";
import Layout from "../layouts/Layout.astro";
import { cn } from "../lib/utils";
---

<Layout>
  <section
    id="lpHero"
    class="relative w-full h-full max-sm:px-5 max-h-[820px] flex flex-col justify-center items-center bg-yellow-400">
    <div
      class="w-fit max-w-[800px] h-fit max-h-[268px] flex flex-col flex-nowrap justify-center items-center gap-6 sm:gap-8">
      <div
        class="flex flex-col flex-nowrap justify-center items-center gap-4 self-stretch">
        <h1
          class="text-black text-[32px] sm:text-[64px] leading-[44px] sm:leading-[72px] font-bold text-center">
          Unleash ENS potential within your&nbsp;app
        </h1>
        <p
          class="max-md:max-w-[600px] text-base sm:text-lg leading-normal sm:leading-7 font-normal text-center text-black/60">
          Unleash full ENS potential within your app check how fully it supports
          ENS
        </p>
      </div>
      <a
        href="/ens-best-practices"
        class={cn(
          shadcnButtonVariants({
            variant: "default",
            size: "default",
            className:
              "cursor-pointer rounded-full px-5 h-11 sm:h-[50px] box-border",
          }),
        )}>ENS best practices</a
      >
    </div>
    <a
      id="scroll-to-previews-anchor"
      href="#previews-section"
      class={cn(
        shadcnButtonVariants({
          variant: "ghost",
          size: "default",
          className:
            "hover:bg-black/5 cursor-pointer absolute max-sm:bottom-5 bottom-[25px] has-[>svg]:p-[10px] w-5 h-5 box-content rounded-[40px] border border-black/20",
        }),
      )}><ChevronDown /></a
    >
  </section>
  <section
    id="previews-section"
    class="w-full box-border h-fit flex flex-col flex-nowrap justify-center items-center gap-10 py-5 sm:py-[60px] px-5 sm:px-8">
  <ItemsList
          header="App benchmarks"
          seeAllLink="/app-benchmarks">
      {
          appReviewCards.slice(0, 4).map((app, idx) => (
                  <AppReviewCard
                          key={`app-review-card-${idx}`}
                          name="Rainbow Wallet"
                          description="Rainbow is a fun, simple, and secure way to get started with crypto and explore Ethereum."
                          overallScore={90}
                          websiteLink="https://rainbow.me/"
                          type="wallet"
                          viewReviewLink={`/app-benchmarks/${idx}`}>
                      <RainbowIcon slot="icon" />
                      <CardBadge
                              slot="badge"
                              text="Top performer"
                              className="text-primary-foreground bg-black"
                      />
                  </AppReviewCard>
          ))
      }
  </ItemsList>
    <ItemsList
      header="ENS best practices"
      seeAllLink="/ens-best-practices">
      {
        bestPracticesCategoryCards
          .slice(0, 4)
          .map((card, idx) => (
            <CategoryCard
              key={`best-practice-card-${idx}`}
              name="ENS Resolution"
              description="This ENSIP standardizes reverse and primary name resolution for all coin types, and defines how this resolution process operates across the  multichain Ethereum ecosystem."
              viewBestPracticesLink={`/ens-best-practices/${card}`}
              numberOfBestPractices={12}
            />
          ))
      }
    </ItemsList>
  </section>
  <script>
    function scrollWithOffset(id, offset) {
      const element = document.getElementById(id);
      if (!element) return;

      const y = element.getBoundingClientRect().top + window.scrollY - offset;

      window.scrollTo({
        top: y,
        behavior: "smooth",
      });
    }

    const scrollAnchor = document.getElementById("scroll-to-previews-anchor");
    scrollAnchor.addEventListener("click", (event) => {
      event.preventDefault();
      scrollWithOffset("previews-section", 50);
    });
  </script>
</Layout>
