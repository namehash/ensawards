---
import { Image } from "astro:assets";
import type {ImageMetadata} from "astro";
import MatrixBadge from "../../components/atoms/MatrixBadge.astro";
import SuggestFormOpener from "../../components/atoms/SuggestFormOpener.astro";
import SupportMatrixCard from "../../components/atoms/cards/SupportMatrixCard.astro";
import ItemsList from "../../components/molecules/ItemsList.astro";
import SubpageHero from "../../components/molecules/SubpageHero.astro";
import Layout from "../../layouts/Layout.astro";
import {appsData} from "../../data/appData";
import {adaptToLink, BenchmarkResultToBadgeStyles, getAppById} from "../../utils";

export function getStaticPaths() {
  return appsData.map((app) => ({ params: { app: adaptToLink(app.name) }}));
}

const { app } = Astro.params;
const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/*.{jpeg,jpg,png,gif,svg}");

const appToDisplay = getAppById(app);

//TODO: update all links to BPs after implementing real BP data
---

<Layout>
  {appToDisplay === undefined ? (
      <p>ERROR</p>
      // TODO: update the error version (even though it should never occur
      ) : (
      <>
        <SubpageHero
            header={appToDisplay.name}
            description={appToDisplay.description}
            breadcrumbs={["App benchmarks"]}
            additionalElements={[
                {name: "Type", value: appToDisplay.type},
                {name: "Website", value: "Visit site", link: new URL(appToDisplay.websiteLink)},
                {name: "Overall score", value: `${appToDisplay.ensAwardsScore}%`}
            ]}>
            <Image src={images[appToDisplay.iconSourceLink]()} alt={`${appToDisplay.id}-hero`} slot="icon" class="w-[60px] h-[60px] shrink-0 rounded-lg" />
        </SubpageHero>
        <section
            class="w-full box-border h-fit flex flex-col flex-nowrap justify-start items-center p-5 sm:gap-10 sm:py-[60px] sm:px-8">
          <ItemsList header="Benchmark results">
            {
              appToDisplay.benchmarks.map((benchmark, idx) => (
                  <SupportMatrixCard
                      name={benchmark.bestPracticeDetails.name}
                      notes={benchmark.bestPracticeDetails.description}
                      viewButtonData={{
                        text: "View best practice details",
                        link: `/ens-best-practices/${idx+1}/0`,
                      }}
                      matrixColumnData={[
                        {
                          category: "Category",
                          value: benchmark.category,
                          link: `/ens-best-practices/${idx+1}`,
                          linkStyles:
                              "text-blue-600 whitespace-nowrap hover:underline hover:underline-offset-[25%]",
                        },
                      ]}>
                    <MatrixBadge
                        slot="badge"
                        text={benchmark.result}
                        className={BenchmarkResultToBadgeStyles.get(benchmark.result)!}
                        iconId={benchmark.result}
                    />
                  </SupportMatrixCard>
              ))
            }
            <SuggestFormOpener
                whatsSuggested="best practice"
                suggestionStyle="outline"
            />
          </ItemsList>
        </section>
      </>
  )}
</Layout>