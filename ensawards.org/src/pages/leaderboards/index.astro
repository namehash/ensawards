---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import LeaderboardCard from "../../components/atoms/cards/LeaderboardCard.astro";
import ItemsList from "../../components/molecules/ItemsList.astro";
import SubpageHero from "../../components/molecules/SubpageHero.astro";
import { contractPipeline } from "../../contract-pipelines";
import { APPS } from "../../data/apps";
import Layout from "../../layouts/Layout.astro";
import { OrgId } from "../../types/organizations";
import {calculateAppEnsAwardsScore, getOrgById} from "../../utils/dataAccess";

const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/*.{jpeg,jpg,png,gif,svg}");
const placeIcons = [
  "/src/assets/firstPlaceAward.svg",
  "/src/assets/secondPlaceAward.svg",
  "/src/assets/thirdPlaceAward.svg",
];

const daoScores = contractPipeline();
---

<Layout
  pageMetadata={{
    title: "ENSAwards: ENS Leaderboards",
    url: "https://ensawards.org/leaderboard",
  }}>
  <SubpageHero header="ENS leaderboards" />
  <section
    class="w-full box-border h-fit flex flex-col flex-nowrap justify-start items-center max-sm:gap-6 gap-10 p-5 sm:py-[60px] sm:px-8">
    <ItemsList
      header="DAO leaderboard"
      linkData={{ link: "/leaderboards/dao", text: "All DAOs" }}
      containerStyles="gap-3 sm:gap-3">
      {
        Object.entries(daoScores)
          .slice(0, 3)
          .map(([scoreCategory, value], idx) => {
            const daoId = scoreCategory as OrgId;
            const org = getOrgById(daoId);
            const OrgIcon = org.icon;
            return (
              <LeaderboardCard
                key={`dao-leaderboard-card-${org.id}`}
                name={org.name}
                ensAwardsScore={value}
                viewDetailsLink={`/dao/${org.slug}`}
                viewDetailsText="DAO report">
                {idx < 3 ? (
                  <Image
                    alt={`${idx + 1}-place`}
                    src={images[placeIcons[idx]]()}
                    slot="placeIcon"
                  />
                ) : (
                  <p
                    slot="placeIcon"
                    class="w-8 pt-[7px] px-[11px] pb-[5px] text-sm leading-normal font-semibold text-muted-foreground">
                    {idx + 1}
                  </p>
                )}
                <OrgIcon slot="appIcon" className="w-10 h-10 rounded-md" />
              </LeaderboardCard>
            );
          })
      }
    </ItemsList>
    <ItemsList
      header="Apps leaderboard"
      linkData={{ link: "/leaderboards/app", text: "All Apps" }}
      containerStyles="gap-3 sm:gap-3">
      {
        APPS.sort((a, b) => calculateAppEnsAwardsScore(b) - calculateAppEnsAwardsScore(a))
          .slice(0, 3)
          .map((app, idx) => (
            <LeaderboardCard
              key={`app-review-card-${app.id}`}
              name={app.name}
              ensAwardsScore={calculateAppEnsAwardsScore(app)}
              type={app.type}
              viewDetailsLink={`/app/${app.slug}`}>
              <Image
                src={images[app.iconSourceLink]()}
                alt={`${app.id}`}
                slot="appIcon"
                class="w-10 h-10 rounded-md"
              />
              {idx < 3 ? (
                <Image
                  alt={`${idx + 1}-place`}
                  src={images[placeIcons[idx]]()}
                  slot="placeIcon"
                />
              ) : (
                <p
                  slot="placeIcon"
                  class="w-8 pt-[7px] px-[11px] pb-[5px] text-sm leading-normal font-semibold text-muted-foreground">
                  {idx + 1}
                </p>
              )}
            </LeaderboardCard>
          ))
      }
    </ItemsList>
  </section>
</Layout>
